# file: .github/workflows/docker-publish.yaml
#  This workflow builds and pushes Docker images for the OpenTelemetry demo CX RUM application
#  whenever changes are pushed to the main branch, specifically in the 'src' directory or
#  the workflow file itself.
#  It uses the GitHub Container Registry (GHCR) for storing the images.
#  The images are built with a specific OpenTelemetry Java agent version and pushed with the 'latest' tag.
#  The workflow is triggered on pushes to the main branch and monitors changes in the specified paths
name: Build and Push Images to GHCR

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - '.github/workflows/docker-publish.yaml'
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      REGISTRY: ghcr.io
      IMAGE_PREFIX: ghcr.io/${{ github.repository }}
      OTEL_JAVA_AGENT_VERSION: 1.33.0

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine changed services
        id: changes
        run: |
          IMAGES="accounting ad cart checkout currency email fraud-detection frontend frontend-proxy image-provider load-generator quote product-catalog recommendation shipping kafka flagd-ui"
          BASE_SHA=$(git rev-parse HEAD~1 || echo "")
          if [ -z "$BASE_SHA" ] || ! git cat-file -e $BASE_SHA 2>/dev/null; then
            echo "‚ö†Ô∏è Base commit missing or invalid, falling back to HEAD~1"
            BASE_SHA=$(git rev-parse HEAD~1)
          fi

          CHANGED=$(git diff --name-only $BASE_SHA $GITHUB_SHA)
          echo "Changed files: $CHANGED"

          echo "IMAGES=$IMAGES" >> $GITHUB_ENV
          echo "CHANGED=$CHANGED" >> $GITHUB_ENV

      - name: Build and push Docker images
        run: |
          for IMAGE in $IMAGES; do
            if echo "$CHANGED" | grep -q "^src/$IMAGE/"; then
              echo "üî® Building and pushing $IMAGE (changed) as tag latest..."

              if [ "$IMAGE" = "cart" ]; then
                docker build \
                  -f src/cart/src/Dockerfile \
                  -t $IMAGE_PREFIX-$IMAGE:latest \
                  --build-arg OTEL_JAVA_AGENT_VERSION=$OTEL_JAVA_AGENT_VERSION \
                  src/cart
              else
                docker build \
                  -f src/$IMAGE/Dockerfile \
                  -t $IMAGE_PREFIX-$IMAGE:latest \
                  --build-arg OTEL_JAVA_AGENT_VERSION=$OTEL_JAVA_AGENT_VERSION \
                  src/$IMAGE
              fi

              docker push $IMAGE_PREFIX-$IMAGE:latest
            else
              echo "‚è≠Ô∏è Skipping $IMAGE (no changes)"
            fi
          done
