# file: .github/workflows/docker-publish.yaml
#  This workflow builds and pushes Docker images for the OpenTelemetry demo CX RUM application
#  whenever changes are pushed to the main branch, specifically in the 'src' directory or
#  the workflow file itself.
#  It uses the GitHub Container Registry (GHCR) for storing the images.
#  The images are built with a specific OpenTelemetry Java agent version and pushed with the 'latest' tag.
#  The workflow is triggered on pushes to the main branch and monitors changes in the specified paths
name: Build and Push Images to GHCR

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - '.github/workflows/docker-publish.yaml'
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      REGISTRY: ghcr.io
      IMAGE_PREFIX: ghcr.io/${{ github.repository }}
      OTEL_JAVA_AGENT_VERSION: 1.33.0

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract tag from Git ref (if versioned tag)
        id: extract-tag
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          else
            echo "TAG=latest" >> $GITHUB_ENV
          fi

      - name: Detect and build changed service images
        run: |
          git fetch --deepen=50
          BASE_SHA=${{ github.event.before }}

          if [ -z "$BASE_SHA" ] || ! git cat-file -e $BASE_SHA 2>/dev/null; then
            echo "‚ö†Ô∏è Base commit is missing or invalid, falling back to HEAD^"
            BASE_SHA=$(git rev-parse HEAD^)
          fi

          CHANGED=$(git diff --name-only $BASE_SHA ${{ github.sha }})

          for DOCKERFILE in $(find src -type f -name Dockerfile); do
            SERVICE_DIR=$(dirname "$DOCKERFILE")
            SERVICE=$(basename "$SERVICE_DIR")

            # Special case for cart Dockerfile under src/cart/src
            if [[ "$SERVICE_DIR" == "src/cart/src" ]]; then
              SERVICE="cart"
              SERVICE_DIR="src/cart/src"
            fi

            if echo "$CHANGED" | grep -q "^src/$SERVICE/"; then
              echo "üî® Building and pushing $SERVICE (changed) as tag $TAG..."
              docker build \
                --build-arg OTEL_JAVA_AGENT_VERSION=${{ env.OTEL_JAVA_AGENT_VERSION }} \
                -t ghcr.io/martinmclarnon/opentelemetry-demo-cx-rum-$SERVICE:$TAG \
                -f $DOCKERFILE $SERVICE_DIR \
                && docker push ghcr.io/martinmclarnon/opentelemetry-demo-cx-rum-$SERVICE:$TAG;
            else
              echo "‚è≠Ô∏è Skipping $SERVICE (no changes)"
            fi
          done
